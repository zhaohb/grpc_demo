// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef PROTOBUF_INCLUDED_example_2eproto
#define PROTOBUF_INCLUDED_example_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_example_2eproto 

namespace protobuf_example_2eproto {
    // Internal implementation detail -- do not use these members.
    struct TableStruct {
        static const ::google::protobuf::internal::ParseTableField entries[];
        static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
        static const ::google::protobuf::internal::ParseTable schema[2];
        static const ::google::protobuf::internal::FieldMetadata field_metadata[];
        static const ::google::protobuf::internal::SerializationTable serialization_table[];
        static const ::google::protobuf::uint32 offsets[];
    };
    void AddDescriptors();
}  // namespace protobuf_example_2eproto
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
namespace google {
    namespace protobuf {
        template<> ::SearchRequest* Arena::CreateMaybeMessage<::SearchRequest>(Arena*);
        template<> ::SearchResponse* Arena::CreateMaybeMessage<::SearchResponse>(Arena*);
    }  // namespace protobuf
}  // namespace google

// ===================================================================

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchRequest) */ {
    public:
        SearchRequest();
        virtual ~SearchRequest();

        SearchRequest(const SearchRequest& from);

        inline SearchRequest& operator=(const SearchRequest& from) {
            CopyFrom(from);
            return *this;
        }
#if LANG_CXX11
        SearchRequest(SearchRequest&& from) noexcept
            : SearchRequest() {
                *this = ::std::move(from);
            }

        inline SearchRequest& operator=(SearchRequest&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }
#endif
        static const ::google::protobuf::Descriptor* descriptor();
        static const SearchRequest& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const SearchRequest* internal_default_instance() {
            return reinterpret_cast<const SearchRequest*>(
                    &_SearchRequest_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            0;

        void Swap(SearchRequest* other);
        friend void swap(SearchRequest& a, SearchRequest& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline SearchRequest* New() const final {
            return CreateMaybeMessage<SearchRequest>(NULL);
        }

        SearchRequest* New(::google::protobuf::Arena* arena) const final {
            return CreateMaybeMessage<SearchRequest>(arena);
        }
        void CopyFrom(const ::google::protobuf::Message& from) final;
        void MergeFrom(const ::google::protobuf::Message& from) final;
        void CopyFrom(const SearchRequest& from);
        void MergeFrom(const SearchRequest& from);
        void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input) final;
        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const final;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(SearchRequest* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return NULL;
        }
        inline void* MaybeArenaPtr() const {
            return NULL;
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string Request = 1;
        void clear_request();
        static const int kRequestFieldNumber = 1;
        const ::std::string& request() const;
        void set_request(const ::std::string& value);
#if LANG_CXX11
        void set_request(::std::string&& value);
#endif
        void set_request(const char* value);
        void set_request(const char* value, size_t size);
        ::std::string* mutable_request();
        ::std::string* release_request();
        void set_allocated_request(::std::string* request);

        // @@protoc_insertion_point(class_scope:SearchRequest)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::internal::ArenaStringPtr request_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_example_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchResponse) */ {
    public:
        SearchResponse();
        virtual ~SearchResponse();

        SearchResponse(const SearchResponse& from);

        inline SearchResponse& operator=(const SearchResponse& from) {
            CopyFrom(from);
            return *this;
        }
#if LANG_CXX11
        SearchResponse(SearchResponse&& from) noexcept
            : SearchResponse() {
                *this = ::std::move(from);
            }

        inline SearchResponse& operator=(SearchResponse&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }
#endif
        static const ::google::protobuf::Descriptor* descriptor();
        static const SearchResponse& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const SearchResponse* internal_default_instance() {
            return reinterpret_cast<const SearchResponse*>(
                    &_SearchResponse_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            1;

        void Swap(SearchResponse* other);
        friend void swap(SearchResponse& a, SearchResponse& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline SearchResponse* New() const final {
            return CreateMaybeMessage<SearchResponse>(NULL);
        }

        SearchResponse* New(::google::protobuf::Arena* arena) const final {
            return CreateMaybeMessage<SearchResponse>(arena);
        }
        void CopyFrom(const ::google::protobuf::Message& from) final;
        void MergeFrom(const ::google::protobuf::Message& from) final;
        void CopyFrom(const SearchResponse& from);
        void MergeFrom(const SearchResponse& from);
        void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input) final;
        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const final;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(SearchResponse* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return NULL;
        }
        inline void* MaybeArenaPtr() const {
            return NULL;
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string Response = 2;
        void clear_response();
        static const int kResponseFieldNumber = 2;
        const ::std::string& response() const;
        void set_response(const ::std::string& value);
#if LANG_CXX11
        void set_response(::std::string&& value);
#endif
        void set_response(const char* value);
        void set_response(const char* value, size_t size);
        ::std::string* mutable_response();
        ::std::string* release_response();
        void set_allocated_response(::std::string* response);

        // @@protoc_insertion_point(class_scope:SearchResponse)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::internal::ArenaStringPtr response_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_example_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchRequest

// string Request = 1;
inline void SearchRequest::clear_request() {
    request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::request() const {
    // @@protoc_insertion_point(field_get:SearchRequest.Request)
    return request_.GetNoArena();
}
inline void SearchRequest::set_request(const ::std::string& value) {

    request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:SearchRequest.Request)
}
#if LANG_CXX11
inline void SearchRequest::set_request(::std::string&& value) {

    request_.SetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:SearchRequest.Request)
}
#endif
inline void SearchRequest::set_request(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:SearchRequest.Request)
}
inline void SearchRequest::set_request(const char* value, size_t size) {

    request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:SearchRequest.Request)
}
inline ::std::string* SearchRequest::mutable_request() {

    // @@protoc_insertion_point(field_mutable:SearchRequest.Request)
    return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_request() {
    // @@protoc_insertion_point(field_release:SearchRequest.Request)

    return request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_request(::std::string* request) {
    if (request != NULL) {

    } else {

    }
    request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
    // @@protoc_insertion_point(field_set_allocated:SearchRequest.Request)
}

// -------------------------------------------------------------------

// SearchResponse

// string Response = 2;
inline void SearchResponse::clear_response() {
    response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchResponse::response() const {
    // @@protoc_insertion_point(field_get:SearchResponse.Response)
    return response_.GetNoArena();
}
inline void SearchResponse::set_response(const ::std::string& value) {

    response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:SearchResponse.Response)
}
#if LANG_CXX11
inline void SearchResponse::set_response(::std::string&& value) {

    response_.SetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:SearchResponse.Response)
}
#endif
inline void SearchResponse::set_response(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:SearchResponse.Response)
}
inline void SearchResponse::set_response(const char* value, size_t size) {

    response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:SearchResponse.Response)
}
inline ::std::string* SearchResponse::mutable_response() {

    // @@protoc_insertion_point(field_mutable:SearchResponse.Response)
    return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchResponse::release_response() {
    // @@protoc_insertion_point(field_release:SearchResponse.Response)

    return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResponse::set_allocated_response(::std::string* response) {
    if (response != NULL) {

    } else {

    }
    response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
    // @@protoc_insertion_point(field_set_allocated:SearchResponse.Response)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_example_2eproto
